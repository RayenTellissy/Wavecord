datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id                                 String                       @id
  username                           String                       @unique
  email                              String
  image                              String?
  status                             Status                       @default(ONLINE)
  current_vc                         Voice_channels?              @relation(fields: [voice_channelId], references: [id])
  voice_channelId                    String?
  muted                              Boolean                      @default(false)
  deafened                           Boolean                      @default(false)
  role                               Role                         @default(BASIC)
  created_at                         DateTime                     @default(now())
  UsersInServers                     UsersInServers[]
  Friends                            Friends[]
  Conversations                      Conversations[]              @relation("Users")
  activeConversation                 Conversations?               @relation(fields: [activeConversationId], references: [id])
  activeConversationId               String?
  DirectMessages                     DirectMessages[]
  servers_created                    Servers[]
  Bans                               Bans[]
  sentFriendRequests                 FriendRequest[]              @relation("FriendRequestSender")
  receivedFriendRequests             FriendRequest[]              @relation("FriendRequestRecipient")
  blockedUsers                       BlockedUsers[]               @relation("blockedUsers")
  blockedByUsers                     BlockedUsers[]               @relation("blockedByUsers")
  ServerMessages                     ServerMessages[]
  BugReports                         BugReports[]
  sentDirectMessageNotifications     DirectMessageNotifications[] @relation("NotificationSender")
  receivedDirectMessageNotifications DirectMessageNotifications[] @relation("NotificationRecipient")
}

model Servers {
  id             String              @id @default(cuid())
  name           String
  image          String
  server_link    String              @unique @default(cuid())
  created_at     DateTime            @default(now())
  owner          Users               @relation(fields: [ownerId], references: [id])
  ownerId        String
  UsersInServers UsersInServers[]
  roles          roles[]
  categories     Server_categories[]
  Text_channels  Text_channels[]
  Voice_channels Voice_channels[]
  Bans           Bans[]
}

model roles {
  id             String           @id @default(cuid())
  name           String
  isAdmin        Boolean
  server         Servers          @relation(fields: [serverId], references: [id])
  serverId       String
  color          String
  UsersInServers UsersInServers[]
  created_at     DateTime         @default(now())
}

model Bans {
  id       String  @id @default(cuid())
  user     Users   @relation(fields: [userId], references: [id])
  userId   String
  server   Servers @relation(fields: [serverId], references: [id])
  serverId String
}

model BlockedUsers {
  id        String @id @default(cuid())
  blocker   Users  @relation("blockedUsers", fields: [blockerId], references: [id])
  blocked   Users  @relation("blockedByUsers", fields: [blockedId], references: [id])
  blockerId String
  blockedId String
}

model UsersInServers {
  id       String   @id @default(cuid())
  server   Servers  @relation(fields: [serverId], references: [id])
  serverId String
  user     Users    @relation(fields: [userId], references: [id])
  userId   String
  role     roles?   @relation(fields: [rolesId], references: [id])
  rolesId  String?
  joined   DateTime @default(now())
}

model Server_categories {
  id             String           @id @default(cuid())
  name           String
  Text_channels  Text_channels[]
  Voice_channels Voice_channels[]
  server         Servers          @relation(fields: [serverId], references: [id])
  serverId       String
}

model Text_channels {
  id         String            @id @default(cuid())
  name       String
  messages   ServerMessages[]
  category   Server_categories @relation(fields: [categoryId], references: [id])
  categoryId String
  isPrivate  Boolean           @default(false)
  server     Servers           @relation(fields: [serverId], references: [id])
  serverId   String
}

model Voice_channels {
  id         String            @id @default(cuid())
  name       String
  Users      Users[]
  category   Server_categories @relation(fields: [categoryId], references: [id])
  categoryId String
  isPrivate  Boolean           @default(false)
  server     Servers           @relation(fields: [serverId], references: [id])
  serverId   String
}

model Friends {
  id             String         @id @default(cuid())
  users          Users[]
  conversation   Conversations? @relation(fields: [conversationId], references: [id])
  conversationId String?        @unique
  created_at     DateTime       @default(now())
}

model FriendRequest {
  id          String @id @default(cuid())
  sender      Users  @relation("FriendRequestSender", fields: [senderId], references: [id])
  recipient   Users  @relation("FriendRequestRecipient", fields: [recipientId], references: [id])
  senderId    String
  recipientId String
}

model Conversations {
  id                         String                       @id @default(cuid())
  users                      Users[]                      @relation("Users")
  usersInRoom                Users[]
  type                       ConversationType
  DirectMessages             DirectMessages[]
  Friends                    Friends?
  updated_at                 DateTime                     @updatedAt
  DirectMessageNotifications DirectMessageNotifications[]
}

model DirectMessages {
  id             String        @id @default(cuid())
  sender         Users         @relation(fields: [senderId], references: [id])
  senderId       String
  conversation   Conversations @relation(fields: [conversationId], references: [id])
  conversationId String
  message        String
  type           MessageType   @default(TEXT)
  created_at     DateTime      @default(now())
}

model ServerMessages {
  id         String        @id @default(cuid())
  sender     Users         @relation(fields: [senderId], references: [id])
  senderId   String
  channel    Text_channels @relation(fields: [channelId], references: [id])
  channelId  String
  message    String
  type       MessageType   @default(TEXT)
  created_at DateTime      @default(now())
}

model DirectMessageNotifications {
  id             String        @id @default(cuid())
  sender         Users         @relation("NotificationSender", fields: [senderId], references: [id])
  senderId       String
  recipient      Users         @relation("NotificationRecipient", fields: [recipientId], references: [id])
  recipientId    String
  conversation   Conversations @relation(fields: [conversationId], references: [id])
  conversationId String
  messages       Int           @default(1)
}

model BugReports {
  id         String   @id @default(cuid())
  sender     Users    @relation(fields: [senderId], references: [id])
  senderId   String
  message    String
  created_at DateTime @default(now())
}

enum Role {
  BASIC
  TURBO
  ADMIN
}

enum Status {
  ONLINE
  BUSY
  OFFLINE
}

enum ConversationType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  LINK
}
