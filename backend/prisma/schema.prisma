datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id                     String           @id
  username               String           @unique
  email                  String
  image                  String?
  status                 Status           @default(ONLINE)
  current_vc             Voice_channels?  @relation(fields: [voice_channelId], references: [id])
  muted                  Boolean          @default(false)
  deafened               Boolean          @default(false)
  role                   Role             @default(BASIC)
  voice_channelId        String?
  created_at             DateTime         @default(now())
  UsersInServers         UsersInServers[]
  Friends                Friends[]
  Conversations          Conversations[]
  DirectMessages         DirectMessages[]
  servers_created        Servers[]
  Bans                   Bans[]
  sentFriendRequests     FriendRequest[]  @relation("FriendRequestSender")
  receivedFriendRequests FriendRequest[]  @relation("FriendRequestRecipient")
  blockedUsers           BlockedUsers[]   @relation("blockedUsers")
  blockedByUsers         BlockedUsers[]   @relation("blockedByUsers")
  ServerMessages         ServerMessages[]
  UsersInRoles           UsersInRoles[]
}

model Servers {
  id             String              @id @default(cuid())
  name           String
  image          String
  roles          roles[]
  categories     Server_categories[]
  server_link    String              @default(cuid())
  created_at     DateTime            @default(now())
  UsersInServers UsersInServers[]
  owner          Users               @relation(fields: [ownerId], references: [id])
  ownerId        String
  Bans           Bans[]
}

model roles {
  id            String          @id @default(cuid())
  name          String
  isAdmin       Boolean
  server        Servers         @relation(fields: [serverId], references: [id])
  serverId      String
  UsersInRoles  UsersInRoles[]
  Text_channels Text_channels[]
}

model UsersInRoles {
  id     String @id @default(cuid())
  role   roles  @relation(fields: [roleId], references: [id])
  roleId String
  user   Users  @relation(fields: [userId], references: [id])
  userId String
}

model Bans {
  id        String  @id @default(cuid())
  userId    Users   @relation(fields: [usersId], references: [id])
  serverId  Servers @relation(fields: [serversId], references: [id])
  usersId   String
  serversId String
}

model BlockedUsers {
  id        String @id @default(cuid())
  blocker   Users  @relation("blockedUsers", fields: [blockerId], references: [id])
  blocked   Users  @relation("blockedByUsers", fields: [blockedId], references: [id])
  blockerId String
  blockedId String
}

model UsersInServers {
  userId    Users    @relation(fields: [usersId], references: [id])
  serverId  Servers  @relation(fields: [serversId], references: [id])
  usersId   String
  serversId String
  joined    DateTime @default(now())

  @@unique([usersId, serversId])
}

model Server_categories {
  id             String           @id @default(cuid())
  name           String
  Text_channels  Text_channels[]
  Voice_channels Voice_channels[]
  server         Servers          @relation(fields: [serverId], references: [id])
  serverId       String
}

model Text_channels {
  id           String            @id @default(cuid())
  name         String
  messages     ServerMessages[]
  category     Server_categories @relation(fields: [categoryId], references: [id])
  categoryId   String
  isPrivate    Boolean           @default(false)
  rolesAllowed roles[]
}

model Voice_channels {
  id         String            @id @default(cuid())
  name       String
  Users      Users[]
  category   Server_categories @relation(fields: [categoryId], references: [id])
  categoryId String
  isPrivate  Boolean           @default(false)
}

model Friends {
  id         String   @id @default(cuid())
  users      Users[]
  created_at DateTime @default(now())
}

model FriendRequest {
  id          String @id @default(cuid())
  sender      Users  @relation("FriendRequestSender", fields: [senderId], references: [id])
  recipient   Users  @relation("FriendRequestRecipient", fields: [recipientId], references: [id])
  senderId    String
  recipientId String
}

model Conversations {
  id             String           @id @default(cuid())
  users          Users[]
  type           ConversationType
  DirectMessages DirectMessages[]
}

model DirectMessages {
  id              String        @id @default(cuid())
  sender          String
  usersId         Users         @relation(fields: [sender], references: [id])
  conversation    Conversations @relation(fields: [conversationsId], references: [id])
  conversationsId String
  message         String
  type            MessageType   @default(TEXT)
  created_at      DateTime      @default(now())
}

model ServerMessages {
  id         String        @id @default(cuid())
  sender     Users         @relation(fields: [senderId], references: [id])
  senderId   String
  channel    Text_channels @relation(fields: [channelId], references: [id])
  channelId  String
  message    String
  type       MessageType   @default(TEXT)
  created_at DateTime      @default(now())
}

enum Role {
  BASIC
  TURBO
  ADMIN
}

enum Status {
  ONLINE
  BUSY
  OFFLINE
}

enum ConversationType {
  DIRECT
  GROUP
}

enum MessageType {
  TEXT
  LINK
}
