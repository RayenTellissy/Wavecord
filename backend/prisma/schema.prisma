datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id              String           @id
  username        String           @unique
  email           String
  image           String?
  status          Status           @default(ONLINE)
  current_vc      Voice_channels?  @relation(fields: [voice_channelId], references: [id])
  muted           Boolean          @default(false)
  deafened        Boolean          @default(false)
  role            Role             @default(BASIC)
  voice_channelId String?
  created_at      DateTime         @default(now())
  UsersInServers  UsersInServers[]
  Friends         Friends[]
  Conversations   Conversations[]
  DirectMessages  DirectMessages[]
  servers_created Servers[]
  Bans            Bans[]
  sentFriendRequests   FriendRequest[] @relation("FriendRequestSender")
  receivedFriendRequests FriendRequest[] @relation("FriendRequestRecipient")
}

model Servers {
  id             String           @id @default(cuid())
  name           String
  image          String
  owner          Users            @relation(fields: [ownerId], references: [id])
  created_at     DateTime         @default(now())
  Voice_channels Voice_channels[]
  UsersInServers UsersInServers[]
  server_link    String           @default(cuid())
  ownerId        String
  Bans           Bans[]
}

model Bans {
  id        String  @id @default(cuid())
  userId    Users   @relation(fields: [usersId], references: [id])
  serverId  Servers @relation(fields: [serversId], references: [id])
  usersId   String
  serversId String
}

model UsersInServers {
  userId    Users    @relation(fields: [usersId], references: [id])
  serverId  Servers  @relation(fields: [serversId], references: [id])
  usersId   String
  serversId String
  joined    DateTime @default(now())

  @@unique([usersId, serversId])
}

model Voice_channels {
  id       String  @id @default(cuid())
  name     String
  server   Servers @relation(fields: [serverId], references: [id])
  serverId String
  Users    Users[]
}

model Friends {
  id         String   @id @default(cuid())
  users      Users[]
  created_at DateTime @default(now())
}

model FriendRequest {
  id          String    @id @default(cuid())
  sender      Users  @relation("FriendRequestSender", fields: [senderId], references: [id])
  recipient   Users  @relation("FriendRequestRecipient", fields: [recipientId], references: [id])
  senderId    String
  recipientId String

  @@index([senderId, recipientId])
}

model Conversations {
  id             String           @id @default(cuid())
  users          Users[]
  type           ConversationType
  DirectMessages DirectMessages[]
}

model DirectMessages {
  id              String        @id @default(cuid())
  sender          String
  usersId         Users         @relation(fields: [sender], references: [id])
  conversation    Conversations @relation(fields: [conversationsId], references: [id])
  conversationsId String
  message         String
  type            MessageType   @default(TEXT)
  created_at      DateTime      @default(now())
}

enum Role {
  BASIC
  TURBO
  ADMIN
}

enum Status {
  ONLINE
  BUSY
  OFFLINE
}

enum ConversationType {
  DIRECT
  GROUP
  SERVER
}

enum MessageType {
  TEXT
  LINK
}
